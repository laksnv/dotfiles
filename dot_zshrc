# Measure boot time
bootTimeStart=$(gdate +%s%N)

# Load the shell dotfiles, and then some:
typeset -a source_files
source_files+="$HOME/.zsh_aliases"
source_files+="$HOME/.zsh_functions"
source_files+="/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source_files+="/usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

foreach source (`echo $source_files`)
  if [[ -a $source ]]; then
    source $source
  fi
end

# For Homebrew scripts like git
export PATH="/usr/local/bin:${PATH}"

# Pyenv
#if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init --path --no-rehash)"
  eval "$(pyenv virtualenv-init - --no-rehash)"
#fi

# Lazy-load NVM: http://broken-by.me/lazy-load-nvm/
nvm() {
    unset -f nvm
    export NVM_DIR=~/.nvm
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    nvm "$@"
}
node() {
    unset -f node
    export NVM_DIR=~/.nvm
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    node "$@"
}
npm() {
    unset -f npm
    export NVM_DIR=~/.nvm
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    npm "$@"
}

# Rbenv
eval "$(rbenv init --no-rehash -)"

# https://github.com/starship/starship
eval "$(starship init zsh)"

# Amazon Builder Toolbox
export PATH=$HOME/.toolbox/bin:$PATH

# Run miniit daily
mwinit_daily

bootTimeDuration=$((($(gdate +%s%N) - $bootTimeStart)/1000000))
echo $bootTimeDuration ms overall boot duration

bark() {
    echo "Fetching logs."
    PRIVATE_REGION=$(awk '{print toupper($0)}' <<< $region)
    PUBLIC_REGION=`/apollo/env/envImprovement/bin/ripcli rip -r $PRIVATE_REGION -a region_name`
    OWNER_PARAM=''
    CELL="$cell"

    if [ "$PRIVATE_REGION" = FRA ] ||  [ "$PRIVATE_REGION" = BOM ] || [ "$PRIVATE_REGION" = ICN ] || [ "$PRIVATE_REGION" = CMH ] || [ "$PRIVATE_REGION" = LHR ] || [ "$PRIVATE_REGION" = YUL ] || [ "$PRIVATE_REGION" = CDG ] || [ "$PRIVATE_REGION" = ARN ] || [ "$PRIVATE_REGION" = KIX ] ; then
        MATERIAL_SET="com.amazon.swf.v3.common.logpulling.credentials"
        ENDPOINT="https://timber-$PRIVATE_REGION.$PRIVATE_REGION.amazon.com"
    elif [ "$PRIVATE_REGION" = HKG ]; then
        MATERIAL_SET="com.amazon.swf.v3.prod.ap-east-1.timber.credentials.service"
        ENDPOINT="https://timber-hkg.hkg.amazon.com"
    elif [ "$PRIVATE_REGION" = BJS ]; then
        MATERIAL_SET="com.amazon.swf.prod.cn-north-1.logpulling.credentials"
        ENDPOINT="https://timber-bjs.amazon.com"
    elif [ "$PRIVATE_REGION" = ZHY ]; then
        MATERIAL_SET="com.amazon.swf.prod.cn-north-1.logpulling.credentials"
        ENDPOINT="https://timber-zhy.zhy.amazon.com"
    elif [ "$PRIVATE_REGION" = LCK ]; then
        MATERIAL_SET="com.amazon.swf.v3.prod.us-isob-east-1.logpulling.credentials"
        ENDPOINT="https://timber-$region.$region.amazon.com"
        OWNER_PARAM=',"-o=swf-core@amazon.com"'
    elif [ "$PRIVATE_REGION" = PDT ]; then
        MATERIAL_SET="com.amazon.swf.prod.us-gov-west-1.logpulling.credentials"
        ENDPOINT="https://timber-$region.$region.amazon.com"
    elif [ "$PRIVATE_REGION" = OSU ]; then
        MATERIAL_SET="com.amazon.swf.v3.prod.us-gov-east-1.logpulling.credentials"
        ENDPOINT="https://timber-$region.$region.amazon.com"
    elif [ "$PRIVATE_REGION" = BAH ] ||  [ "$PRIVATE_REGION" = MXP ] || [ "$PRIVATE_REGION" = CPT ]; then
        MATERIAL_SET="com.amazon.swf.v3.prod.$PUBLIC_REGION.timber.credentials.service"
        ENDPOINT="https://timber-$PRIVATE_REGION.$PRIVATE_REGION.amazon.com"
    else
        MATERIAL_SET="com.amazon.swf.v3.common.logpulling.credentials"
        ENDPOINT="https://timber-$region.amazon.com"
        OWNER_PARAM=',"-o=swf-core@amazon.com"'
    fi

    if [ ! -z "$CELL" ]; then
        CELL_INDEX=${$(echo "$CELL" | tr '[:upper:]' '[:lower:]')#"cell"}
        MATERIAL_SET="com.amazon.swf.v3.prod.$PUBLIC_REGION-cell-$CELL_INDEX.timber.credentials.service"
        OWNER_PARAM=',"-o=swf-core+'$(echo "$PRIVATE_REGION" | tr '[:upper:]' '[:lower:]')'-c-'$CELL_INDEX'.prod.timber@amazon.com"'
    fi

    arguments="$*"

    mechanic execute host apollo env run-low-risk-tool --alias SimpleWorkflowOps --file mechanic.sh --parameter 'BarkCLI,bark,BarkLogs'$OWNER_PARAM',"-ms='$MATERIAL_SET'","-ep='$ENDPOINT'",'"${arguments// /,}"'' --host $host --region $region
}
export JAVA_TOOLS_OPTIONS="-Dlog4j2.formatMsgNoLookups=true"
